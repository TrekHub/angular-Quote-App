"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ng_add_1 = require("./ng-add");
const PROJECT_NAME = 'THEPROJECT';
const PROJECT_ROOT = 'PROJECTROOT';
const OTHER_PROJECT_NAME = 'OTHERPROJECT';
describe('ng-add', () => {
    describe('generating files', () => {
        let tree;
        beforeEach(() => {
            tree = schematics_1.Tree.empty();
            tree.create('angular.json', JSON.stringify(generateAngularJson()));
        });
        it('generates new files if starting from scratch', () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(tree, {});
            const actual = result.read('angular.json').toString();
            expect(prettifyJSON(actual)).toMatchSnapshot();
        }));
        it('overrides existing files', () => __awaiter(void 0, void 0, void 0, function* () {
            const tempTree = yield ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(tree, {});
            const result = yield ng_add_1.ngAdd({
                project: OTHER_PROJECT_NAME
            })(tempTree, {});
            const actual = result.read('angular.json').toString();
            expect(prettifyJSON(actual)).toMatchSnapshot();
        }));
    });
    describe('error handling', () => {
        it('should fail if project not defined', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = schematics_1.Tree.empty();
            const angularJSON = generateAngularJson();
            delete angularJSON.defaultProject;
            tree.create('angular.json', JSON.stringify(angularJSON));
            yield expect(ng_add_1.ngAdd({
                project: ''
            })(tree, {})).rejects.toThrowError('No Angular project selected and no default project in the workspace');
        }));
        it('should throw if angular.json not found', () => __awaiter(void 0, void 0, void 0, function* () {
            yield expect(ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(schematics_1.Tree.empty(), {})).rejects.toThrowError('Unable to determine format for workspace path.');
        }));
        it('should throw if angular.json can not be parsed', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = schematics_1.Tree.empty();
            tree.create('angular.json', 'hi');
            yield expect(ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(tree, {})).rejects.toThrowError('Invalid JSON character: "h" at 0:0.');
        }));
        it('should throw if specified project does not exist', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = schematics_1.Tree.empty();
            tree.create('angular.json', JSON.stringify({ version: 1, projects: {} }));
            yield expect(ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(tree, {})).rejects.toThrowError('The specified Angular project is not defined in this workspace');
        }));
        it('should throw if specified project is not application', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = schematics_1.Tree.empty();
            tree.create('angular.json', JSON.stringify({
                version: 1,
                projects: { [PROJECT_NAME]: { projectType: 'invalid' } }
            }));
            yield expect(ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(tree, {})).rejects.toThrowError('Deploy requires an Angular project type of "application" in angular.json');
        }));
        it('should throw if app does not have architect configured', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = schematics_1.Tree.empty();
            tree.create('angular.json', JSON.stringify({
                version: 1,
                projects: { [PROJECT_NAME]: { projectType: 'application' } }
            }));
            yield expect(ng_add_1.ngAdd({
                project: PROJECT_NAME
            })(tree, {})).rejects.toThrowError('Cannot read the output path (architect.build.options.outputPath) of the Angular project "THEPROJECT" in angular.json');
        }));
    });
});
function prettifyJSON(json) {
    return JSON.stringify(JSON.parse(json), null, 2);
}
function generateAngularJson() {
    return {
        version: 1,
        defaultProject: PROJECT_NAME,
        projects: {
            [PROJECT_NAME]: {
                projectType: 'application',
                root: PROJECT_ROOT,
                architect: {
                    build: {
                        options: {
                            outputPath: 'dist/' + PROJECT_NAME
                        }
                    }
                }
            },
            [OTHER_PROJECT_NAME]: {
                projectType: 'application',
                root: PROJECT_ROOT,
                architect: {
                    build: {
                        options: {
                            outputPath: 'dist/' + OTHER_PROJECT_NAME
                        }
                    }
                }
            }
        }
    };
}
//# sourceMappingURL=ng-add.spec.js.map