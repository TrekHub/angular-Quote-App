{"version":3,"file":"ng-add.spec.js","sourceRoot":"","sources":["../ng-add.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { SchematicContext, Tree } from '@angular-devkit/schematics';\n\nimport { ngAdd } from './ng-add';\n\nconst PROJECT_NAME = 'THEPROJECT';\nconst PROJECT_ROOT = 'PROJECTROOT';\nconst OTHER_PROJECT_NAME = 'OTHERPROJECT';\n\ndescribe('ng-add', () => {\n  describe('generating files', () => {\n    let tree: Tree;\n\n    beforeEach(() => {\n      tree = Tree.empty();\n      tree.create('angular.json', JSON.stringify(generateAngularJson()));\n    });\n\n    it('generates new files if starting from scratch', async () => {\n      const result = await ngAdd({\n        project: PROJECT_NAME\n      })(tree, {} as SchematicContext);\n\n      const actual = result.read('angular.json')!.toString();\n      expect(prettifyJSON(actual)).toMatchSnapshot();\n    });\n\n    it('overrides existing files', async () => {\n      const tempTree = await ngAdd({\n        project: PROJECT_NAME\n      })(tree, {} as SchematicContext);\n\n      const result = await ngAdd({\n        project: OTHER_PROJECT_NAME\n      })(tempTree, {} as SchematicContext);\n\n      const actual = result.read('angular.json')!.toString();\n\n      expect(prettifyJSON(actual)).toMatchSnapshot();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should fail if project not defined', async () => {\n      const tree = Tree.empty();\n      const angularJSON = generateAngularJson();\n      delete angularJSON.defaultProject;\n      tree.create('angular.json', JSON.stringify(angularJSON));\n\n      await expect(\n        ngAdd({\n          project: ''\n        })(tree, {} as SchematicContext)\n      ).rejects.toThrowError(\n        'No Angular project selected and no default project in the workspace'\n      );\n    });\n\n    it('should throw if angular.json not found', async () => {\n      await expect(\n        ngAdd({\n          project: PROJECT_NAME\n        })(Tree.empty(), {} as SchematicContext)\n      ).rejects.toThrowError('Unable to determine format for workspace path.');\n    });\n\n    it('should throw if angular.json can not be parsed', async () => {\n      const tree = Tree.empty();\n      tree.create('angular.json', 'hi');\n\n      await expect(\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).rejects.toThrowError('Invalid JSON character: \"h\" at 0:0.');\n    });\n\n    it('should throw if specified project does not exist', async () => {\n      const tree = Tree.empty();\n      tree.create('angular.json', JSON.stringify({ version: 1, projects: {} }));\n\n      await expect(\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).rejects.toThrowError(\n        'The specified Angular project is not defined in this workspace'\n      );\n    });\n\n    it('should throw if specified project is not application', async () => {\n      const tree = Tree.empty();\n      tree.create(\n        'angular.json',\n        JSON.stringify({\n          version: 1,\n          projects: { [PROJECT_NAME]: { projectType: 'invalid' } }\n        })\n      );\n\n      await expect(\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).rejects.toThrowError(\n        'Deploy requires an Angular project type of \"application\" in angular.json'\n      );\n    });\n\n    it('should throw if app does not have architect configured', async () => {\n      const tree = Tree.empty();\n      tree.create(\n        'angular.json',\n        JSON.stringify({\n          version: 1,\n          projects: { [PROJECT_NAME]: { projectType: 'application' } }\n        })\n      );\n\n      await expect(\n        ngAdd({\n          project: PROJECT_NAME\n        })(tree, {} as SchematicContext)\n      ).rejects.toThrowError(\n        'Cannot read the output path (architect.build.options.outputPath) of the Angular project \"THEPROJECT\" in angular.json'\n      );\n    });\n  });\n});\n\nfunction prettifyJSON(json: string) {\n  return JSON.stringify(JSON.parse(json), null, 2);\n}\n\nfunction generateAngularJson() {\n  return {\n    version: 1,\n    defaultProject: PROJECT_NAME as string | undefined,\n    projects: {\n      [PROJECT_NAME]: {\n        projectType: 'application',\n        root: PROJECT_ROOT,\n        architect: {\n          build: {\n            options: {\n              outputPath: 'dist/' + PROJECT_NAME\n            }\n          }\n        }\n      },\n      [OTHER_PROJECT_NAME]: {\n        projectType: 'application',\n        root: PROJECT_ROOT,\n        architect: {\n          build: {\n            options: {\n              outputPath: 'dist/' + OTHER_PROJECT_NAME\n            }\n          }\n        }\n      }\n    }\n  };\n}\n"]}